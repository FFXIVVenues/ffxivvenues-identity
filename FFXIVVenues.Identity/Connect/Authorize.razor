@page "/connect/authorize"
@attribute [Authorize]
@using FFXIVVenues.Identity.Connect.Clients
@using FFXIVVenues.Identity.Identity
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject ClientManager ClientManager
@inject NavigationManager NavigationManager
@inject UserService UserService;

@code {

    [SupplyParameterFromQuery(Name = "client_id")]
    public required string ClientId { get; set; }
    [SupplyParameterFromQuery(Name = "redirect_uri")]
    public required string RedirectUri { get; set; }
    [SupplyParameterFromQuery(Name = "response_type")]
    public required string ResponseType { get; set; }
    [SupplyParameterFromQuery(Name = "scope")]
    public required string Scope { get; set; }
    [SupplyParameterFromQuery(Name = "state")]
    public required string State { get; set; }

    private Client Client { get; set; } = null!;
    private ClientScope[]? Scopes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ClientId is null)
            NavigationManager.NavigateTo("/error");
        if (RedirectUri is not { Length: > 0 })
            NavigationManager.NavigateTo("/error");

        var client = this.ClientManager.GetClient(ClientId!);
        if (client is null)
            NavigationManager.NavigateTo("/error");
        if (!client!.RedirectUris.Contains(RedirectUri))
            NavigationManager.NavigateTo("/error");

        if (ResponseType is not "code")
        {
            var uri = new UriBuilder(RedirectUri) { Query = $"state={State}&error=unsupported_response_type" };
            NavigationManager.NavigateTo(uri.ToString());
        }

        if (Scope is not { Length: > 0 } || State is not {Length: > 0})
        {
            var uri = new UriBuilder(RedirectUri) { Query = $"state={State}&error=invalid_request" };
            NavigationManager.NavigateTo(uri.ToString());
        }
        
        var scopesRequested = this.Scope?.Split(" ") ?? Array.Empty<string>();
        Scopes = client.Scopes.Where(s => scopesRequested.Contains(s.Name)).ToArray();
        if (scopesRequested.Length > Scopes.Length)
        {
            var uri = new UriBuilder(RedirectUri) { Query = $"state={State}&error=invalid_scope" };
            NavigationManager.NavigateTo(uri.ToString());
        }

        
        Client = client;
        await base.OnInitializedAsync();
    }

    private void OnAllowClick(MouseEventArgs _)
    {
        var user = UserService.GetCurrentUser();
        var code = ClientManager.CreateAuthorizationCode(ClientId, user!.Id, RedirectUri, Scopes);
        var uri = new UriBuilder(RedirectUri) { Query = $"state={State}&code={code.Code}" };
        NavigationManager.NavigateTo(uri.ToString());
    }

    private void OnCancelClick(MouseEventArgs _)
    {
        var uri = new UriBuilder(RedirectUri) { Query = $"state={State}&error=access_denied" };
        NavigationManager.NavigateTo(uri.ToString());
    }
}

<PageTitle>Authorize</PageTitle>

<div class="authorize-page">
    <heading>
        <img src="@Client.ClientIcon" alt="Icon for @Client.ClientName}"/>
        <h1><strong>@Client.ClientName</strong><br/> requests access to your identity</h1>
    </heading>
    
    @Client.ClientName requests access to:
    <ul>
    @foreach (var scope in this.Scopes!)
    {
        @if (scope.Name == "openid") continue;
            <li>
                <strong>@(scope.Name switch
                        {
                            "profile" => "Your name and avatar",
                            "email" => "Your email address",
                            "roles" => "Your roles"
                        })</strong>
                <p>@scope.Justification</p>
            </li>
    }
    </ul>

    <div class="response-buttons">
        <Button OnClick="OnAllowClick">Allow</Button>
        <Button OnClick="OnCancelClick">Cancel</Button>
    </div>
</div>
