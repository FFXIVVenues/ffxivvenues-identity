@page "/connect/authorize"
@attribute [Authorize]
@using FFXIVVenues.Identity.Connect.Clients
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject ClientManager ClientManager

@code {
    [SupplyParameterFromQuery(Name = "client_id")]
    public string? ClientId { get; set; }
    [SupplyParameterFromQuery(Name = "redirect_uri")]
    public string? RedirectUri { get; set; }
    [SupplyParameterFromQuery(Name = "response_type")]
    public string? ResponseType { get; set; }
    [SupplyParameterFromQuery(Name = "scope")]
    public string? Scope { get; set; }
    [SupplyParameterFromQuery(Name = "state")]
    public string? State { get; set; }

    private Client Client { get; set; } = null!;
    private string[]? Scopes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Scopes = this.Scope?.Split("+") ?? Array.Empty<string>();
        Client = this.ClientManager.GetClient(ClientId);
        await base.OnInitializedAsync();
    }
}

<PageTitle>Authorize</PageTitle>

<div class="authorize-page">
    <h1>Authorizing with @Client.ClientName.</h1>
    
    <table>
        <tr><td>Client Id:</td><td>@ClientId</td></tr>
        <tr><td>Redirect Uri:</td><td>@RedirectUri</td></tr>
        <tr><td>Response Type:</td><td>@ResponseType</td></tr>
        <tr><td>Scopes:</td><td>@if (Scopes is not null)
            foreach (var scope in this.Scopes) { <text>@scope</text> }
        </td></tr>
        <tr><td>State:</td><td>@State</td></tr>
    </table>
    
    <button>Allow</button>
    <button>Deny</button>
</div>
